/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as VideosIndexImport } from './routes/videos/index'
import { Route as DocumentsIndexImport } from './routes/documents/index'
import { Route as AudiosIndexImport } from './routes/audios/index'
import { Route as DocumentsDocumentIdImport } from './routes/documents/$documentId'
import { Route as AudiosAudioIdImport } from './routes/audios/$audioId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VideosIndexRoute = VideosIndexImport.update({
  id: '/videos/',
  path: '/videos/',
  getParentRoute: () => rootRoute,
} as any)

const DocumentsIndexRoute = DocumentsIndexImport.update({
  id: '/documents/',
  path: '/documents/',
  getParentRoute: () => rootRoute,
} as any)

const AudiosIndexRoute = AudiosIndexImport.update({
  id: '/audios/',
  path: '/audios/',
  getParentRoute: () => rootRoute,
} as any)

const DocumentsDocumentIdRoute = DocumentsDocumentIdImport.update({
  id: '/documents/$documentId',
  path: '/documents/$documentId',
  getParentRoute: () => rootRoute,
} as any)

const AudiosAudioIdRoute = AudiosAudioIdImport.update({
  id: '/audios/$audioId',
  path: '/audios/$audioId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/audios/$audioId': {
      id: '/audios/$audioId'
      path: '/audios/$audioId'
      fullPath: '/audios/$audioId'
      preLoaderRoute: typeof AudiosAudioIdImport
      parentRoute: typeof rootRoute
    }
    '/documents/$documentId': {
      id: '/documents/$documentId'
      path: '/documents/$documentId'
      fullPath: '/documents/$documentId'
      preLoaderRoute: typeof DocumentsDocumentIdImport
      parentRoute: typeof rootRoute
    }
    '/audios/': {
      id: '/audios/'
      path: '/audios'
      fullPath: '/audios'
      preLoaderRoute: typeof AudiosIndexImport
      parentRoute: typeof rootRoute
    }
    '/documents/': {
      id: '/documents/'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/videos/': {
      id: '/videos/'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/audios/$audioId': typeof AudiosAudioIdRoute
  '/documents/$documentId': typeof DocumentsDocumentIdRoute
  '/audios': typeof AudiosIndexRoute
  '/documents': typeof DocumentsIndexRoute
  '/videos': typeof VideosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/audios/$audioId': typeof AudiosAudioIdRoute
  '/documents/$documentId': typeof DocumentsDocumentIdRoute
  '/audios': typeof AudiosIndexRoute
  '/documents': typeof DocumentsIndexRoute
  '/videos': typeof VideosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/audios/$audioId': typeof AudiosAudioIdRoute
  '/documents/$documentId': typeof DocumentsDocumentIdRoute
  '/audios/': typeof AudiosIndexRoute
  '/documents/': typeof DocumentsIndexRoute
  '/videos/': typeof VideosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/audios/$audioId'
    | '/documents/$documentId'
    | '/audios'
    | '/documents'
    | '/videos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/audios/$audioId'
    | '/documents/$documentId'
    | '/audios'
    | '/documents'
    | '/videos'
  id:
    | '__root__'
    | '/'
    | '/audios/$audioId'
    | '/documents/$documentId'
    | '/audios/'
    | '/documents/'
    | '/videos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AudiosAudioIdRoute: typeof AudiosAudioIdRoute
  DocumentsDocumentIdRoute: typeof DocumentsDocumentIdRoute
  AudiosIndexRoute: typeof AudiosIndexRoute
  DocumentsIndexRoute: typeof DocumentsIndexRoute
  VideosIndexRoute: typeof VideosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AudiosAudioIdRoute: AudiosAudioIdRoute,
  DocumentsDocumentIdRoute: DocumentsDocumentIdRoute,
  AudiosIndexRoute: AudiosIndexRoute,
  DocumentsIndexRoute: DocumentsIndexRoute,
  VideosIndexRoute: VideosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/audios/$audioId",
        "/documents/$documentId",
        "/audios/",
        "/documents/",
        "/videos/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/audios/$audioId": {
      "filePath": "audios/$audioId.tsx"
    },
    "/documents/$documentId": {
      "filePath": "documents/$documentId.tsx"
    },
    "/audios/": {
      "filePath": "audios/index.tsx"
    },
    "/documents/": {
      "filePath": "documents/index.tsx"
    },
    "/videos/": {
      "filePath": "videos/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
